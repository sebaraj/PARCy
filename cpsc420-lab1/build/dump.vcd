$date
	Tue Jan 28 00:04:38 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module imuldiv_DivReqMsgFromBits $end
$var wire 65 ! bits [64:0] $end
$var wire 1 " func $end
$var wire 32 # b [31:0] $end
$var wire 32 $ a [31:0] $end
$upscope $end
$scope module imuldiv_DivReqMsgToBits $end
$var wire 32 % a [31:0] $end
$var wire 32 & b [31:0] $end
$var wire 1 ' func $end
$var wire 65 ( bits [64:0] $end
$upscope $end
$scope module imuldiv_DivReqMsgToStr $end
$var wire 65 ) msg [64:0] $end
$var wire 1 * func $end
$var wire 32 + b [31:0] $end
$var wire 32 , a [31:0] $end
$var parameter 1 - fn_signed $end
$var parameter 1 . fn_unsigned $end
$var reg 160 / full_str [159:0] $end
$var reg 16 0 tiny_str [15:0] $end
$upscope $end
$scope module imuldiv_MulDivReqMsgFromBits $end
$var wire 67 1 bits [66:0] $end
$var wire 3 2 func [2:0] $end
$var wire 32 3 b [31:0] $end
$var wire 32 4 a [31:0] $end
$upscope $end
$scope module imuldiv_MulDivReqMsgToBits $end
$var wire 32 5 a [31:0] $end
$var wire 32 6 b [31:0] $end
$var wire 3 7 func [2:0] $end
$var wire 67 8 bits [66:0] $end
$upscope $end
$scope module imuldiv_MulDivReqMsgToStr $end
$var wire 67 9 msg [66:0] $end
$var wire 3 : func [2:0] $end
$var wire 32 ; b [31:0] $end
$var wire 32 < a [31:0] $end
$var parameter 3 = div $end
$var parameter 3 > divu $end
$var parameter 3 ? mul $end
$var parameter 3 @ rem $end
$var parameter 3 A remu $end
$var reg 160 B full_str [159:0] $end
$var reg 16 C tiny_str [15:0] $end
$upscope $end
$scope module sim $end
$var wire 1 D muldivreq_go $end
$var wire 1 E muldivresp_go $end
$var wire 1 F sink_rdy $end
$var wire 1 G src_rdy $end
$var wire 1 H sink_val $end
$var wire 64 I sink_msg [63:0] $end
$var reg 1 J busy $end
$var reg 1 K clk $end
$var reg 32 L cycle_count [31:0] $end
$var reg 1024 M op_type [1023:0] $end
$var reg 1 N reset $end
$var reg 32 O src_msg_a [31:0] $end
$var reg 32 P src_msg_b [31:0] $end
$var reg 3 Q src_msg_fn [2:0] $end
$var reg 1 R src_val $end
$scope module imuldiv $end
$var wire 1 K clk $end
$var wire 1 S divreq_msg_fn $end
$var wire 1 T divreq_val $end
$var wire 32 U muldivreq_msg_a [31:0] $end
$var wire 32 V muldivreq_msg_b [31:0] $end
$var wire 3 W muldivreq_msg_fn [2:0] $end
$var wire 1 G muldivreq_rdy $end
$var wire 1 R muldivreq_val $end
$var wire 1 F muldivresp_rdy $end
$var wire 1 H muldivresp_val $end
$var wire 1 X mulreq_val $end
$var wire 1 N reset $end
$var wire 1 Y mulresp_val $end
$var wire 64 Z mulresp_msg_result [63:0] $end
$var wire 1 [ mulreq_rdy $end
$var wire 64 \ muldivresp_msg_result [63:0] $end
$var wire 1 ] divresp_val $end
$var wire 64 ^ divresp_msg_result [63:0] $end
$var wire 1 _ divreq_rdy $end
$scope module idiv $end
$var wire 1 K clk $end
$var wire 32 ` divreq_msg_a [31:0] $end
$var wire 32 a divreq_msg_b [31:0] $end
$var wire 1 S divreq_msg_fn $end
$var wire 1 T divreq_val $end
$var wire 1 F divresp_rdy $end
$var wire 1 N reset $end
$var wire 1 b perform_shift_op_div $end
$var wire 1 c perform_load_div $end
$var wire 1 ] divresp_val $end
$var wire 64 d divresp_msg_result [63:0] $end
$var wire 1 _ divreq_rdy $end
$var wire 1 e counter_is_zero_div $end
$var wire 1 f counter_decr_div $end
$scope module ctrl $end
$var wire 1 K clk $end
$var wire 1 T divreq_val $end
$var wire 1 F divresp_rdy $end
$var wire 1 N reset $end
$var wire 1 e counter_is_zero_div $end
$var reg 1 f counter_decr_div $end
$var reg 1 _ divreq_rdy $end
$var reg 1 ] divresp_val $end
$var reg 2 g next_state_div [1:0] $end
$var reg 1 c perform_load_div $end
$var reg 1 b perform_shift_op_div $end
$var reg 2 h state_div [1:0] $end
$upscope $end
$scope module dpath $end
$var wire 1 K clk $end
$var wire 1 f counter_decr_div $end
$var wire 32 i divreq_msg_a [31:0] $end
$var wire 32 j divreq_msg_b [31:0] $end
$var wire 1 S divreq_msg_fn $end
$var wire 1 _ divreq_rdy $end
$var wire 1 T divreq_val $end
$var wire 1 F divresp_rdy $end
$var wire 1 ] divresp_val $end
$var wire 1 c perform_load_div $end
$var wire 1 b perform_shift_op_div $end
$var wire 1 N reset $end
$var wire 1 k sign_op $end
$var wire 1 l sign_quotient_op $end
$var wire 1 m sign_remainder_op $end
$var wire 32 n unsigned_remainder [31:0] $end
$var wire 32 o unsigned_quotient [31:0] $end
$var wire 32 p unsigned_b [31:0] $end
$var wire 32 q unsigned_a [31:0] $end
$var wire 1 r sign_bit_b $end
$var wire 1 s sign_bit_a $end
$var wire 32 t output_remainder [31:0] $end
$var wire 32 u output_quotient [31:0] $end
$var wire 64 v divresp_msg_result [63:0] $end
$var wire 65 w diff_a_b [64:0] $end
$var wire 1 e counter_is_zero_div $end
$var wire 65 x a_shifted [64:0] $end
$var reg 65 y a_reg [64:0] $end
$var reg 65 z b_reg [64:0] $end
$var reg 5 { counter_reg [4:0] $end
$var reg 65 | diff [64:0] $end
$var reg 1 } sign_a_reg $end
$var reg 1 ~ sign_b_reg $end
$var reg 1 !" sign_result_reg $end
$var reg 1 "" val_reg $end
$upscope $end
$upscope $end
$scope module imul $end
$var wire 1 K clk $end
$var wire 32 #" mulreq_msg_a [31:0] $end
$var wire 32 $" mulreq_msg_b [31:0] $end
$var wire 1 X mulreq_val $end
$var wire 1 F mulresp_rdy $end
$var wire 1 N reset $end
$var wire 1 %" perform_shift_op $end
$var wire 1 &" perform_load $end
$var wire 1 '" perform_add_op $end
$var wire 1 Y mulresp_val $end
$var wire 64 (" mulresp_msg_result [63:0] $end
$var wire 1 [ mulreq_rdy $end
$var wire 1 )" lsb $end
$var wire 1 *" counter_is_zero $end
$var wire 1 +" counter_decr $end
$scope module ctrl $end
$var wire 1 K clk $end
$var wire 1 X mulreq_val $end
$var wire 1 F mulresp_rdy $end
$var wire 1 '" perform_add_op $end
$var wire 1 N reset $end
$var wire 1 )" lsb $end
$var wire 1 *" counter_is_zero $end
$var reg 1 +" counter_decr $end
$var reg 1 [ mulreq_rdy $end
$var reg 1 Y mulresp_val $end
$var reg 2 ," next_state [1:0] $end
$var reg 1 &" perform_load $end
$var reg 1 %" perform_shift_op $end
$var reg 2 -" state [1:0] $end
$upscope $end
$scope module dpath $end
$var wire 1 K clk $end
$var wire 1 +" counter_decr $end
$var wire 32 ." mulreq_msg_a [31:0] $end
$var wire 32 /" mulreq_msg_b [31:0] $end
$var wire 1 [ mulreq_rdy $end
$var wire 1 X mulreq_val $end
$var wire 64 0" mulresp_msg_result [63:0] $end
$var wire 1 F mulresp_rdy $end
$var wire 1 Y mulresp_val $end
$var wire 1 '" perform_add_op $end
$var wire 1 &" perform_load $end
$var wire 1 %" perform_shift_op $end
$var wire 1 N reset $end
$var wire 32 1" unsigned_b [31:0] $end
$var wire 32 2" unsigned_a [31:0] $end
$var wire 64 3" signed_result [63:0] $end
$var wire 1 4" sign_bit_b $end
$var wire 1 5" sign_bit_a $end
$var wire 1 )" lsb $end
$var wire 1 *" counter_is_zero $end
$var reg 64 6" a_reg [63:0] $end
$var reg 32 7" b_reg [31:0] $end
$var reg 5 8" counter_reg [4:0] $end
$var reg 64 9" result_reg [63:0] $end
$var reg 1 :" sign_result_reg $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 A
b11 @
b0 ?
b10 >
b1 =
0.
1-
$end
#0
$dumpvars
x:"
bx 9"
bx 8"
bx 7"
bx 6"
x5"
x4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
0+"
x*"
x)"
bx ("
x'"
0&"
0%"
bx $"
bx #"
x""
x!"
x~
x}
bx |
bx {
bx z
bx y
bx0 x
bx w
bx v
bx u
bx t
xs
xr
bx q
bx p
bx o
bx n
xm
xl
xk
bx j
bx i
bx h
bx g
0f
xe
bx d
0c
0b
bx a
bx `
0_
bx ^
0]
bx \
0[
bx Z
0Y
0X
bx W
bx V
bx U
0T
xS
0R
bx Q
bx P
bx O
1N
bx M
b0 L
0K
0J
bx I
0H
0G
1F
0E
0D
b11111100111111 C
b111010101101110011001000110010101100110011010010110111001100101011001000010000001100110011101010110111001100011 B
bz <
bz ;
bz :
bz 9
bz 8
bz 7
bz 6
bz 5
bz 4
bz 3
bz 2
bz 1
b11111100111111 0
b111010101101110011001000110010101100110011010010110111001100101011001000010000001100110011101010110111001100011 /
bz ,
bz +
z*
bz )
bz (
z'
bz &
bz %
bz $
bz #
z"
bz !
$end
#5
b0 u
b0 ^
b0 d
b0 v
b0 t
1G
0'"
0)"
b0 Z
b0 ("
b0 0"
b0 3"
1[
b0 ,"
0m
0l
b0 w
b0 x
b0 o
b0 n
1_
b0 g
0:"
b0 7"
b0 6"
0*"
b11111 8"
b0 9"
b0 -"
0""
0~
0}
0!"
b0 |
b0 z
b0 y
0e
b11111 {
b0 h
1K
#10
1c
b1 g
1_
b1001 p
b1001 1"
b11111110 q
b11111110 2"
1T
1k
1D
0r
04"
0s
05"
1S
0K
1R
b1001 P
b1001 V
b1001 a
b1001 j
b1001 $"
b1001 /"
b11111110 O
b11111110 U
b11111110 `
b11111110 i
b11111110 #"
b11111110 ."
b11 Q
b11 W
b11100100110010101101101 M
0N
#15
0T
0G
b11111110 ^
b11111110 d
b11111110 v
b11111110 u
0D
1f
1b
0_
0c
b111111100 x
b11111110 o
b1 L
0R
1J
b1 h
1""
1!"
b11111111111111111111111111111011100000000000000000000000111111100 w
b100100000000000000000000000000000000 z
b11111110 y
1K
#20
0K
#25
b111111100 ^
b111111100 d
b111111100 v
b111111100 u
b11111111111111111111111111111011100000000000000000000001111111000 w
b1111111000 x
b111111100 o
b11110 {
b111111100 y
b10 L
1K
#30
0K
#35
b1111111000 ^
b1111111000 d
b1111111000 v
b1111111000 u
b11111111111111111111111111111011100000000000000000000011111110000 w
b11111110000 x
b1111111000 o
b11 L
b11101 {
b1111111000 y
1K
#40
0K
#45
b11111110000 ^
b11111110000 d
b11111110000 v
b11111110000 u
b11111111111111111111111111111011100000000000000000000111111100000 w
b111111100000 x
b11111110000 o
b11100 {
b11111110000 y
b100 L
1K
#50
0K
#55
b111111100000 ^
b111111100000 d
b111111100000 v
b111111100000 u
b11111111111111111111111111111011100000000000000000001111111000000 w
b1111111000000 x
b111111100000 o
b101 L
b11011 {
b111111100000 y
1K
#60
0K
#65
b1111111000000 ^
b1111111000000 d
b1111111000000 v
b1111111000000 u
b11111111111111111111111111111011100000000000000000011111110000000 w
b11111110000000 x
b1111111000000 o
b11010 {
b1111111000000 y
b110 L
1K
#70
0K
#75
b11111110000000 ^
b11111110000000 d
b11111110000000 v
b11111110000000 u
b11111111111111111111111111111011100000000000000000111111100000000 w
b111111100000000 x
b11111110000000 o
b111 L
b11001 {
b11111110000000 y
1K
#80
0K
#85
b111111100000000 ^
b111111100000000 d
b111111100000000 v
b111111100000000 u
b11111111111111111111111111111011100000000000000001111111000000000 w
b1111111000000000 x
b111111100000000 o
b11000 {
b111111100000000 y
b1000 L
1K
#90
0K
#95
b1111111000000000 ^
b1111111000000000 d
b1111111000000000 v
b1111111000000000 u
b11111111111111111111111111111011100000000000000011111110000000000 w
b11111110000000000 x
b1111111000000000 o
b1001 L
b10111 {
b1111111000000000 y
1K
#100
0K
#105
b11111110000000000 ^
b11111110000000000 d
b11111110000000000 v
b11111110000000000 u
b11111111111111111111111111111011100000000000000111111100000000000 w
b111111100000000000 x
b11111110000000000 o
b10110 {
b11111110000000000 y
b1010 L
1K
#110
0K
#115
b111111100000000000 ^
b111111100000000000 d
b111111100000000000 v
b111111100000000000 u
b11111111111111111111111111111011100000000000001111111000000000000 w
b1111111000000000000 x
b111111100000000000 o
b1011 L
b10101 {
b111111100000000000 y
1K
#120
0K
#125
b1111111000000000000 ^
b1111111000000000000 d
b1111111000000000000 v
b1111111000000000000 u
b11111111111111111111111111111011100000000000011111110000000000000 w
b11111110000000000000 x
b1111111000000000000 o
b10100 {
b1111111000000000000 y
b1100 L
1K
#130
0K
#135
b11111110000000000000 ^
b11111110000000000000 d
b11111110000000000000 v
b11111110000000000000 u
b11111111111111111111111111111011100000000000111111100000000000000 w
b111111100000000000000 x
b11111110000000000000 o
b1101 L
b10011 {
b11111110000000000000 y
1K
#140
0K
#145
b111111100000000000000 ^
b111111100000000000000 d
b111111100000000000000 v
b111111100000000000000 u
b11111111111111111111111111111011100000000001111111000000000000000 w
b1111111000000000000000 x
b111111100000000000000 o
b10010 {
b111111100000000000000 y
b1110 L
1K
#150
0K
#155
b1111111000000000000000 ^
b1111111000000000000000 d
b1111111000000000000000 v
b1111111000000000000000 u
b11111111111111111111111111111011100000000011111110000000000000000 w
b11111110000000000000000 x
b1111111000000000000000 o
b1111 L
b10001 {
b1111111000000000000000 y
1K
#160
0K
#165
b11111110000000000000000 ^
b11111110000000000000000 d
b11111110000000000000000 v
b11111110000000000000000 u
b11111111111111111111111111111011100000000111111100000000000000000 w
b111111100000000000000000 x
b11111110000000000000000 o
b10000 {
b11111110000000000000000 y
b10000 L
1K
#170
0K
#175
b111111100000000000000000 ^
b111111100000000000000000 d
b111111100000000000000000 v
b111111100000000000000000 u
b11111111111111111111111111111011100000001111111000000000000000000 w
b1111111000000000000000000 x
b111111100000000000000000 o
b10001 L
b1111 {
b111111100000000000000000 y
1K
#180
0K
#185
b1111111000000000000000000 ^
b1111111000000000000000000 d
b1111111000000000000000000 v
b1111111000000000000000000 u
b11111111111111111111111111111011100000011111110000000000000000000 w
b11111110000000000000000000 x
b1111111000000000000000000 o
b1110 {
b1111111000000000000000000 y
b10010 L
1K
#190
0K
#195
b11111110000000000000000000 ^
b11111110000000000000000000 d
b11111110000000000000000000 v
b11111110000000000000000000 u
b11111111111111111111111111111011100000111111100000000000000000000 w
b111111100000000000000000000 x
b11111110000000000000000000 o
b10011 L
b1101 {
b11111110000000000000000000 y
1K
#200
0K
#205
b111111100000000000000000000 ^
b111111100000000000000000000 d
b111111100000000000000000000 v
b111111100000000000000000000 u
b11111111111111111111111111111011100001111111000000000000000000000 w
b1111111000000000000000000000 x
b111111100000000000000000000 o
b1100 {
b111111100000000000000000000 y
b10100 L
1K
#210
0K
#215
b1111111000000000000000000000 ^
b1111111000000000000000000000 d
b1111111000000000000000000000 v
b1111111000000000000000000000 u
b11111111111111111111111111111011100011111110000000000000000000000 w
b11111110000000000000000000000 x
b1111111000000000000000000000 o
b10101 L
b1011 {
b1111111000000000000000000000 y
1K
#220
0K
#225
b11111110000000000000000000000 ^
b11111110000000000000000000000 d
b11111110000000000000000000000 v
b11111110000000000000000000000 u
b11111111111111111111111111111011100111111100000000000000000000000 w
b111111100000000000000000000000 x
b11111110000000000000000000000 o
b1010 {
b11111110000000000000000000000 y
b10110 L
1K
#230
0K
#235
b111111100000000000000000000000 ^
b111111100000000000000000000000 d
b111111100000000000000000000000 v
b111111100000000000000000000000 u
b11111111111111111111111111111011101111111000000000000000000000000 w
b1111111000000000000000000000000 x
b111111100000000000000000000000 o
b10111 L
b1001 {
b111111100000000000000000000000 y
1K
#240
0K
#245
b1111111000000000000000000000000 ^
b1111111000000000000000000000000 d
b1111111000000000000000000000000 v
b1111111000000000000000000000000 u
b11111111111111111111111111111011111111110000000000000000000000000 w
b11111110000000000000000000000000 x
b1111111000000000000000000000000 o
b1000 {
b1111111000000000000000000000000 y
b11000 L
1K
#250
0K
#255
b11111110000000000000000000000000 ^
b11111110000000000000000000000000 d
b11111110000000000000000000000000 v
b11111110000000000000000000000000 u
b11111111111111111111111111111100011111100000000000000000000000000 w
b111111100000000000000000000000000 x
b11111110000000000000000000000000 o
b11001 L
b111 {
b11111110000000000000000000000000 y
1K
#260
0K
#265
b11111100000000000000000000000000 u
b111111100000000000000000000000000 ^
b111111100000000000000000000000000 d
b111111100000000000000000000000000 v
b1 t
b11111111111111111111111111111101011111000000000000000000000000000 w
b1111111000000000000000000000000000 x
b11111100000000000000000000000000 o
b1 n
b110 {
b111111100000000000000000000000000 y
b11010 L
1K
#270
0K
#275
b11111000000000000000000000000000 u
b1111111000000000000000000000000000 ^
b1111111000000000000000000000000000 d
b1111111000000000000000000000000000 v
b11 t
b11111111111111111111111111111111011110000000000000000000000000000 w
b11111110000000000000000000000000000 x
b11111000000000000000000000000000 o
b11 n
b11011 L
b101 {
b1111111000000000000000000000000000 y
1K
#280
0K
#285
b11110000000000000000000000000000 u
b11111110000000000000000000000000000 ^
b11111110000000000000000000000000000 d
b11111110000000000000000000000000000 v
b111 t
b11011100000000000000000000000000000 w
b111111100000000000000000000000000000 x
b11110000000000000000000000000000 o
b111 n
b100 {
b11111110000000000000000000000000000 y
b11100 L
1K
#290
0K
#295
b11100000000000000000000000000001 u
b11011100000000000000000000000000001 ^
b11011100000000000000000000000000001 d
b11011100000000000000000000000000001 v
b110 t
b10011000000000000000000000000000010 w
b110111000000000000000000000000000010 x
b11100000000000000000000000000001 o
b110 n
b11101 L
b11 {
b11011100000000000000000000000000001 y
1K
#300
0K
#305
b11000000000000000000000000000011 u
b10011000000000000000000000000000011 ^
b10011000000000000000000000000000011 d
b10011000000000000000000000000000011 v
b100 t
b10000000000000000000000000000110 w
b100110000000000000000000000000000110 x
b11000000000000000000000000000011 o
b100 n
b10 {
b10011000000000000000000000000000011 y
b11110 L
1K
#310
0K
#315
b10000000000000000000000000000111 u
b10000000000000000000000000000111 ^
b10000000000000000000000000000111 d
b10000000000000000000000000000111 v
b0 t
b11111111111111111111111111111100000000000000000000000000000001110 w
b100000000000000000000000000001110 x
b10000000000000000000000000000111 o
b0 n
b11111 L
b1 {
b10000000000000000000000000000111 y
1K
#320
0K
#325
b1110 u
b100000000000000000000000000001110 ^
b100000000000000000000000000001110 d
b100000000000000000000000000001110 v
b1 t
b10 g
1f
1b
b11111111111111111111111111111100100000000000000000000000000011100 w
b1000000000000000000000000000011100 x
b1110 o
b1 n
1e
b0 {
b100000000000000000000000000001110 y
b100000 L
1K
#330
0K
#335
b1000000000000000000000000000011100 I
b1000000000000000000000000000011100 \
1E
1H
b11100 u
b1000000000000000000000000000011100 ^
b1000000000000000000000000000011100 d
b1000000000000000000000000000011100 v
b10 t
b0 g
1]
0f
0b
b11111111111111111111111111111101100000000000000000000000000111000 w
b10000000000000000000000000000111000 x
b11100 o
b10 n
b100001 L
b10 h
0e
b11111 {
b1000000000000000000000000000011100 y
1K
#340
0K
#345
bx I
bx \
0E
1G
0H
1_
0]
b0 h
1K
